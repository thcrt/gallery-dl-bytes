"""
This type stub file was generated by pyright.
"""

__author__ = ...
__copyright__ = ...
__license__ = ...
__maintainer__ = ...
__email__ = ...
__version__ = ...

def main(): ...

class InputManager:
    def __init__(self) -> None: ...
    def add_url(self, url):  # -> None:
        ...
    def add_list(self, urls):  # -> None:
        ...
    def add_file(self, path, action=...):  # -> None:
        """Process an input file.

        Lines starting with '#' and empty lines will be ignored.
        Lines starting with '-' will be interpreted as a key-value pair
          separated by an '='. where
          'key' is a dot-separated option name and
          'value' is a JSON-parsable string.
          These configuration options will be applied
          while processing the next URL only.
        Lines starting with '-G' are the same as above, except these options
          will be applied for *all* following URLs, i.e. they are Global.
        Everything else will be used as a potential URL.

        Example input file:

        # settings global options
        -G base-directory = "/tmp/"
        -G skip = false

        # setting local options for the next URL
        -filename="spaces_are_optional.jpg"
        -skip    = true

        https://example.org/

        # next URL uses default filename and 'skip' is false.
        https://example.com/index.htm # comment1
        https://example.com/404.htm   # comment2
        """
        ...

    def progress(self, pformat=...):  # -> None:
        ...
    def next(self):  # -> None:
        ...
    def success(self):  # -> None:
        ...
    def error(self):  # -> None:
        ...
    def __iter__(self):  # -> Self:
        ...
    def __next__(self): ...

class ExtendedUrl:
    """URL with attached config key-value pairs"""

    __slots__ = ...
    def __init__(self, url, gconf, lconf) -> None: ...
    def __str__(self) -> str: ...
