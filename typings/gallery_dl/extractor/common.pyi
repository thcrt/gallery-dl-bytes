"""
This type stub file was generated by pyright.
"""

from collections.abc import Collection, Generator
from re import Match
from typing import Any, Self, Sequence

from requests import Session
from requests.adapters import HTTPAdapter

from .message import MessageType

"""Common classes and constants used by extractor modules."""
urllib3 = ...

class Extractor:
    session: Session

    _retries: int
    _retry_codes: Collection[int]
    _timeout: float
    _verify: bool | str

    _cfgpath: set[str]

    category: str = ...
    subcategory: str = ...
    basecategory: str = ...
    categorytransfer = ...
    directory_fmt = ...
    filename_fmt = ...
    archive_fmt = ...
    root = ...
    cookies_domain = ...
    cookies_index = ...
    referer = ...
    ciphers = ...
    tls12 = ...
    browser = ...
    useragent = ...
    request_interval = ...
    request_interval_min = ...
    request_interval_429 = ...
    request_timestamp = ...
    def __init__(self, match: Match[str]) -> None: ...
    @classmethod
    def from_url(cls, url: str) -> Self | None: ...
    def __iter__(self) -> Generator[MessageType]: ...
    def initialize(self) -> None: ...
    def finalize(self) -> None: ...
    def items(self) -> Generator[MessageType]: ...
    def skip(self, num: int) -> int: ...
    def config(self, key: str, default: Any = ...) -> Any: ...
    def config2(
        self, key: str, key2: str, default: Any = ..., sentinel: Any = ...
    ) -> Any: ...
    def config_deprecated(
        self, key: str, deprecated: str, default: Any=..., sentinel: Any=..., history: Collection[str]=...
    ) -> Any:
        ...
    def config_accumulate(self, key: str) -> list[Any]:
        ...
    def config_instance(self, key: str, default: Any=...) -> Any:
        ...
    def request(
        self,
        url: str | bytes,
        method: str | bytes=...,
        session: Session | None=...,
        retries: float | None=...,
        retry_codes: Sequence[int]=...,
        encoding: str | None=...,
        fatal: bool | None=...,
        notfound: Any=...,
        **kwargs: dict[str, Any],
    ): ...

    _handle_429 = ...
    def wait(self, seconds=..., until=..., adjust=..., reason=...):  # -> None:
        ...
    def sleep(self, seconds, reason):  # -> None:
        ...
    def input(self, prompt, echo=...):  # -> str | None:
        ...
    def cookies_load(self, cookies_source):  # -> None:
        ...
    def cookies_store(self):  # -> None:
        """Store the session's cookies in a cookies.txt file"""
        ...

    def cookies_update(self, cookies, domain=...):  # -> None:
        """Update the session's cookiejar with 'cookies'"""
        ...

    def cookies_update_dict(self, cookiedict, domain):  # -> None:
        """Update cookiejar with name-value pairs from a dict"""
        ...

    def cookies_check(self, cookies_names, domain=...):  # -> bool:
        """Check if all 'cookies_names' are in the session's cookiejar"""
        ...

class GalleryExtractor(Extractor):
    subcategory = ...
    filename_fmt = ...
    directory_fmt = ...
    archive_fmt = ...
    enum = ...
    def __init__(self, match, url=...) -> None: ...
    def items(
        self,
    ):  # -> Generator[tuple[int, None] | tuple[int, Any, None], Any, None]:
        ...
    def login(self):  # -> None:
        """Login and set necessary cookies"""
        ...

    def metadata(self, page):  # -> None:
        """Return a dict with general metadata"""
        ...

    def images(self, page):  # -> None:
        """Return a list of all (image-url, metadata)-tuples"""
        ...

class ChapterExtractor(GalleryExtractor):
    subcategory = ...
    directory_fmt = ...
    filename_fmt = ...
    archive_fmt = ...
    enum = ...

class MangaExtractor(Extractor):
    subcategory = ...
    categorytransfer = ...
    chapterclass = ...
    reverse = ...
    def __init__(self, match, url=...) -> None: ...
    def items(self):  # -> Generator[tuple[int, Any, Any], Any, None]:
        ...
    def login(self):  # -> None:
        """Login and set necessary cookies"""
        ...

    def chapters(self, page):  # -> None:
        """Return a list of all (chapter-url, metadata)-tuples"""
        ...

class AsynchronousMixin:
    """Run info extraction in a separate thread"""
    def __iter__(self):  # -> Generator[Any, Any, None]:
        ...
    def async_items(self, messages):  # -> None:
        ...

class BaseExtractor(Extractor):
    instances = ...
    def __init__(self, match) -> None: ...
    @classmethod
    def update(cls, instances):  # -> str:
        ...

class RequestsAdapter(HTTPAdapter):
    def __init__(self, ssl_context=..., source_address=...) -> None: ...
    def init_poolmanager(self, *args, **kwargs): ...
    def proxy_manager_for(self, *args, **kwargs): ...

_adapter_cache = ...
_browser_cookies = ...
HTTP_HEADERS = ...
SSL_CIPHERS = ...
BROTLI = ...
ZSTD = ...
action = ...
if action: ...
