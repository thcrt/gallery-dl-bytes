"""
This type stub file was generated by pyright.
"""

stdout_write = ...

class Job:
    """Base class for Job types"""

    ulog = ...
    _logger_adapter = ...
    def __init__(self, extr, parent=...) -> None: ...
    def run(self):  # -> int:
        """Execute or run the job"""
        ...

    def dispatch(self, msg):  # -> None:
        """Call the appropriate message handler"""
        ...

    def handle_url(self, url, kwdict):  # -> None:
        """Handle Message.Url"""
        ...

    def handle_directory(self, kwdict):  # -> None:
        """Handle Message.Directory"""
        ...

    def handle_queue(self, url, kwdict):  # -> None:
        """Handle Message.Queue"""
        ...

    def handle_finalize(self):  # -> None:
        """Handle job finalization"""
        ...

    def update_kwdict(self, kwdict):  # -> None:
        """Update 'kwdict' with additional metadata"""
        ...

    def get_logger(
        self, name
    ):  # -> gallery_dl.output.LoggerAdapter | gallery_dl.actions.LoggerAdapter:
        ...

class DownloadJob(Job):
    """Download images into appropriate directory/filename locations"""
    def __init__(self, url, parent=...) -> None: ...
    def handle_url(self, url, kwdict):  # -> None:
        """Download the resource specified in 'url'"""
        ...

    def handle_directory(self, kwdict):  # -> None:
        """Set and create the target directory for downloads"""
        ...

    def handle_queue(self, url, kwdict): ...
    def handle_finalize(self):  # -> None:
        ...
    def handle_skip(self):  # -> None:
        ...
    def download(self, url):  # -> Any | Literal[False]:
        """Download 'url'"""
        ...

    def get_downloader(self, scheme):  # -> Any | None:
        """Return a downloader suitable for 'scheme'"""
        ...

    def initialize(self, kwdict=...):
        """Delayed initialization of PathFormat, etc."""
        ...

    def register_hooks(self, hooks, options=...):  # -> None:
        ...

class SimulationJob(DownloadJob):
    """Simulate the extraction process without downloading anything"""
    def handle_url(self, url, kwdict):  # -> None:
        ...
    def handle_directory(self, kwdict):  # -> None:
        ...

class KeywordJob(Job):
    """Print available keywords"""
    def __init__(self, url, parent=...) -> None: ...
    def handle_url(self, url, kwdict): ...
    def handle_directory(self, kwdict):  # -> None:
        ...
    def handle_queue(self, url, kwdict): ...
    def print_kwdict(self, kwdict, prefix=..., markers=...):  # -> None:
        """Print key-value pairs in 'kwdict' with formatting"""
        ...

class UrlJob(Job):
    """Print download urls"""

    maxdepth = ...
    def __init__(self, url, parent=..., depth=...) -> None: ...
    @staticmethod
    def handle_url(url, _):  # -> None:
        ...
    @staticmethod
    def handle_url_fallback(url, kwdict):  # -> None:
        ...
    def handle_queue(self, url, kwdict):  # -> None:
        ...

class InfoJob(Job):
    """Print extractor defaults and settings"""
    def run(self):  # -> Literal[0]:
        ...

class DataJob(Job):
    """Collect extractor results and dump them"""

    resolve = ...
    def __init__(
        self, url, parent=..., file=..., ensure_ascii=..., resolve=...
    ) -> None: ...
    def run(self):  # -> Literal[0]:
        ...
    def handle_url(self, url, kwdict):  # -> None:
        ...
    def handle_directory(self, kwdict):  # -> None:
        ...
    def handle_queue(self, url, kwdict):  # -> None:
        ...
    def handle_queue_resolve(self, url, kwdict):  # -> None:
        ...
