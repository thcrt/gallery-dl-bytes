"""
This type stub file was generated by pyright.
"""

"""Exception classes used by gallery-dl

Class Hierarchy:

Exception
 +-- GalleryDLException
      +-- ExtractionError
      |    +-- AuthenticationError
      |    +-- AuthorizationError
      |    +-- NotFoundError
      |    +-- HttpError
      +-- FormatError
      |    +-- FilenameFormatError
      |    +-- DirectoryFormatError
      +-- FilterError
      +-- InputFileError
      +-- NoExtractorError
      +-- StopExtraction
      +-- TerminateExtraction
      +-- RestartExtraction
"""

class GalleryDLException(Exception):
    """Base class for GalleryDL exceptions"""

    default = ...
    msgfmt = ...
    code = ...
    def __init__(self, message=..., fmt=...) -> None: ...

class ExtractionError(GalleryDLException):
    """Base class for exceptions during information extraction"""

    ...

class HttpError(ExtractionError):
    """HTTP request during data extraction failed"""

    default = ...
    code = ...
    def __init__(self, message=..., response=...) -> None: ...

class NotFoundError(ExtractionError):
    """Requested resource (gallery/image) could not be found"""

    msgfmt = ...
    default = ...
    code = ...

class AuthenticationError(ExtractionError):
    """Invalid or missing login credentials"""

    default = ...
    code = ...

class AuthorizationError(ExtractionError):
    """Insufficient privileges to access a resource"""

    default = ...
    code = ...

class FormatError(GalleryDLException):
    """Error while building output paths"""

    code = ...

class FilenameFormatError(FormatError):
    """Error while building output filenames"""

    msgfmt = ...

class DirectoryFormatError(FormatError):
    """Error while building output directory paths"""

    msgfmt = ...

class FilterError(GalleryDLException):
    """Error while evaluating a filter expression"""

    msgfmt = ...
    code = ...

class InputFileError(GalleryDLException):
    """Error when parsing input file"""

    code = ...
    def __init__(self, message, *args) -> None: ...

class NoExtractorError(GalleryDLException):
    """No extractor can handle the given URL"""

    code = ...

class StopExtraction(GalleryDLException):
    """Stop data extraction"""
    def __init__(self, message=..., *args) -> None: ...

class TerminateExtraction(GalleryDLException):
    """Terminate data extraction"""

    code = ...

class RestartExtraction(GalleryDLException):
    """Restart data extraction"""

    code = ...
