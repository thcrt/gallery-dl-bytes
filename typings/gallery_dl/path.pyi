"""
This type stub file was generated by pyright.
"""

"""Filesystem path handling"""
WINDOWS = ...
EXTENSION_MAP = ...

class PathFormat:
    def __init__(self, extractor) -> None: ...
    def open(self, mode=...):  # -> IO[Any]:
        """Open file and return a corresponding file object"""
        ...

    def exists(self):  # -> bool:
        """Return True if the file exists on disk"""
        ...

    @staticmethod
    def check_file():  # -> Literal[True]:
        ...
    def set_directory(self, kwdict):  # -> None:
        """Build directory path and create it if necessary"""
        ...

    def set_filename(self, kwdict):  # -> None:
        """Set general filename data"""
        ...

    def set_extension(self, extension, real=...):  # -> None:
        """Set filename extension"""
        ...

    def fix_extension(self, _=...):  # -> Literal[True]:
        """Fix filenames without a given filename extension"""
        ...

    def build_filename(self, kwdict):  # -> str | Any | CustomNone | LiteralString:
        """Apply 'kwdict' to filename format string"""
        ...

    def build_filename_conditional(
        self, kwdict
    ):  # -> str | Any | CustomNone | LiteralString:
        ...
    def build_directory(self, kwdict):  # -> list[Any]:
        """Apply 'kwdict' to directory format strings"""
        ...

    def build_directory_conditional(self, kwdict):  # -> list[Any]:
        ...
    def build_path(self):  # -> None:
        """Combine directory and filename to full paths"""
        ...

    def part_enable(self, part_directory=...):  # -> None:
        """Enable .part file usage"""
        ...

    def part_size(self):  # -> int:
        """Return size of .part file"""
        ...

    def finalize(self):  # -> Literal[False] | None:
        """Move tempfile to its target location"""
        ...
