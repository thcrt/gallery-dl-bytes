"""
This type stub file was generated by pyright.
"""

from collections.abc import Collection, Mapping
from typing import Any

from . import util

"""Global configuration module"""
log = ...
_config = ...
_files = ...
if util.WINDOWS:
    _default_configs = ...
else:
    _default_configs = ...
if util.EXECUTABLE: ...

def initialize():  # -> Literal[1, 0]:
    ...
def open_extern():  # -> int:
    ...
def status():  # -> None:
    ...
def load(files=..., strict=..., loads=...):  # -> None:
    """Load JSON configuration files"""
    ...

def clear():  # -> None:
    """Reset configuration to an empty state"""
    ...

def get(path, key, default=..., conf=...):  # -> None:
    """Get the value of property 'key' or a default value"""
    ...

def interpolate(
    path: Collection[str], key: str, default: Any = ..., conf: Mapping[str, Any] = ...
) -> Any:
    """Interpolate the value of 'key'"""
    ...

def interpolate_common(common, paths, key, default=..., conf=...):  # -> object | None:
    """Interpolate the value of 'key'
    using multiple 'paths' along a 'common' ancestor
    """
    ...

def accumulate(path, key, conf=...):  # -> list[Any]:
    """Accumulate the values of 'key' along 'path'"""
    ...

def set(path, key, value, conf=...):  # -> None:
    """Set the value of property 'key' for this session"""
    ...

def setdefault(path, key, value, conf=...):
    """Set the value of property 'key' if it doesn't exist"""
    ...

def unset(path, key, conf=...):  # -> None:
    """Unset the value of property 'key'"""
    ...

class apply:
    """Context Manager: apply a collection of key-value pairs"""
    def __init__(self, kvlist) -> None: ...
    def __enter__(self):  # -> None:
        ...
    def __exit__(self, exc_type, exc_value, traceback):  # -> None:
        ...
