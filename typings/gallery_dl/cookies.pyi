"""
This type stub file was generated by pyright.
"""

SUPPORTED_BROWSERS_CHROMIUM = ...
SUPPORTED_BROWSERS = ...
logger = ...

def load_cookies(browser_specification):  # -> list[Cookie] | list[Any]:
    ...
def load_cookies_firefox(profile=..., container=..., domain=...):  # -> list[Cookie]:
    ...
def load_cookies_safari(profile=..., domain=...):  # -> list[Any]:
    """Ref.: https://github.com/libyal/dtformats/blob
             /main/documentation/Safari%20Cookies.asciidoc
    - This data appears to be out of date
      but the important parts of the database structure is the same
    - There are a few bytes here and there
      which are skipped during parsing
    """
    ...

def load_cookies_chromium(
    browser_name, profile=..., keyring=..., domain=...
):  # -> list[Any]:
    ...

class ChromiumCookieDecryptor:
    """
    Overview:

        Linux:
        - cookies are either v10 or v11
            - v10: AES-CBC encrypted with a fixed key
            - v11: AES-CBC encrypted with an OS protected key (keyring)
            - v11 keys can be stored in various places depending on the
              activate desktop environment [2]

        Mac:
        - cookies are either v10 or not v10
            - v10: AES-CBC encrypted with an OS protected key (keyring)
              and more key derivation iterations than linux
            - not v10: "old data" stored as plaintext

        Windows:
        - cookies are either v10 or not v10
            - v10: AES-GCM encrypted with a key which is encrypted with DPAPI
            - not v10: encrypted with DPAPI

    Sources:
    - [1] https://chromium.googlesource.com/chromium/src/+/refs/heads
          /main/components/os_crypt/
    - [2] https://chromium.googlesource.com/chromium/src/+/refs/heads
          /main/components/os_crypt/key_storage_linux.cc
        - KeyStorageLinux::CreateService
    """
    def decrypt(self, encrypted_value): ...
    @property
    def cookie_counts(self): ...

class LinuxChromiumCookieDecryptor(ChromiumCookieDecryptor):
    def __init__(self, browser_keyring_name, keyring=..., meta_version=...) -> None: ...
    @staticmethod
    def derive_key(password):  # -> bytes:
        ...
    @property
    def cookie_counts(self):  # -> dict[str, int]:
        ...
    def decrypt(self, encrypted_value):  # -> str | None:
        ...

class MacChromiumCookieDecryptor(ChromiumCookieDecryptor):
    def __init__(self, browser_keyring_name, meta_version=...) -> None: ...
    @staticmethod
    def derive_key(password):  # -> bytes:
        ...
    @property
    def cookie_counts(self):  # -> dict[str, int]:
        ...
    def decrypt(self, encrypted_value):  # -> str | None:
        ...

class WindowsChromiumCookieDecryptor(ChromiumCookieDecryptor):
    def __init__(self, browser_root, meta_version=...) -> None: ...
    @property
    def cookie_counts(self):  # -> dict[str, int]:
        ...
    def decrypt(self, encrypted_value):  # -> str | None:
        ...

class ParserError(Exception): ...

class DataParser:
    def __init__(self, data) -> None: ...
    def read_bytes(self, num_bytes): ...
    def expect_bytes(self, expected_value, message):  # -> None:
        ...
    def read_uint(self, big_endian=...):  # -> Any:
        ...
    def read_double(self, big_endian=...):  # -> Any:
        ...
    def read_cstring(self):  # -> str:
        ...
    def skip(self, num_bytes, description=...):  # -> None:
        ...
    def skip_to(self, offset, description=...):  # -> None:
        ...
    def skip_to_end(self, description=...):  # -> None:
        ...

class DatabaseConnection:
    def __init__(self, path) -> None: ...
    def __enter__(self):  # -> Connection:
        ...
    def __exit__(self, exc_type, exc_value, traceback):  # -> None:
        ...

def Popen_communicate(*args):  # -> tuple[Popen, Any]:
    ...

DE_OTHER = ...
DE_CINNAMON = ...
DE_GNOME = ...
DE_KDE = ...
DE_PANTHEON = ...
DE_UNITY = ...
DE_XFCE = ...
KEYRING_KWALLET = ...
KEYRING_GNOMEKEYRING = ...
KEYRING_BASICTEXT = ...
SUPPORTED_KEYRINGS = ...

def pbkdf2_sha1(password, salt, iterations, key_length):  # -> bytes:
    ...

_log_cache = ...
_log_debug = ...
_log_info = ...
